"use client";


import styles from "./[id].module.css"
import { title } from "process";
import { useEffect, useState } from "react";
import styles from "./[id].module.css";
import { useParams } from "next/navigation";

const mockUsers = [
  {
    id: 1,
    head: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Username",
    date: "19 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/mail.svg",
  },
  {
    id: 2,
    head: "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/unsuccess.svg",
  },
   {
    id: 3,
    head: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/food.svg",
  },
   {
    id: 4,
    head: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/orderchange.svg",
  },
   {
    id: 5,
    head: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/create.svg",
  },
   {
    id: 6,
    head: "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/unsuccess.svg",
  },

  {
    id: 7,
    head: "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    date: "20 ‡∏™.‡∏Ñ. 2025",
    imgsrc: "/unsuccess.svg",
  },
];
interface NotiCon {
  id : string;
  title : string;
  type : string;
  content : string;
  createdAt : string;
  attributes : NotiAttributes;
}

interface NotiAttributes {
  members : string[];
  tableNo : string;
  reserveId : string;
  when : string;
  queueNo? : string;
  restaurant? : string;
}

export default function NotificationDetailPage (){
  const params = useParams();
   const id = params.id as string;
  const [notiContent, setNotiContent] = useState<NotiCon | null>(null);

  const handleConfirm = () => {
    alert("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    
  };

  useEffect(() =>{
    const fetchNotiContent = async () => {
      try{
        const token = localStorage.getItem("token");
        const res = await fetch("http://localhost:8080/notification/1",{
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = await res.json();
         console.log("üîç Data from API:", data);
        const found = data.items.find((item: NotiCon) => item.id === id);
        setNotiContent(found || null);
        console.log("reserveId:", found?.attributes.reserveId);
      }
      catch(err){
        console.error(err);
      }
    }
    fetchNotiContent();
  },[id])
  if (!notiContent) return <p>‡πÑ‡∏°‡πà‡∏û‡∏ö notification</p>;
  return (
    <div>
      <div className={styles.container}>
        <div className={styles.content}>
          <div className={styles.header}>
            <h2>{notiContent.title}</h2>
          </div>

            {notiContent.type === "RESERVE_WITH" && (
              <div className={styles.detail}>
                <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î :&nbsp;{notiContent.content}</p>
                <p>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {notiContent.attributes.tableNo}</p>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {notiContent.attributes.when}</p>
                <div className={styles.member}>
                  <p>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å :&nbsp;</p>
                  <div>
                    {notiContent.attributes.members.map((member, index) => (
                      <p key={index}>{member}</p>
                    ))}
                  </div>
                </div>
                <p className={styles.descibe}>*  ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß
                      ‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</p>
                <div className={styles.confirmBtn}>
                  <button
            className={styles.acceptBtn}
            onClick={async () => {
              try {
                const token = localStorage.getItem("token");
                if (!token) {
                  alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
                  return;
                }
                const reserveId = notiContent.attributes.reserveId;
               
                const res = await fetch(
                  "http://localhost:8080/table/reservation/${reserveId}/confirm_member",
                  {
                    method: "POST",
                    headers: {
                      Authorization: `Bearer ${token}`,
                      "Content-Type": "application/json",
                    },
                  }
                );

                if (!res.ok) {
                  const err = await res.text();
                  throw new Error(err);
                }

                alert("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
              } catch (error) {
                console.error(error);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞");
              }
            }}
          >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      </button>
                  <button className={styles.cancleBtn}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
              </div>
            )}

            {notiContent.type === "ORDER_FINISHED" && (
              <div className={styles.detail}>
                <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î :&nbsp;{notiContent.content}</p>
                <p>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {notiContent.attributes.tableNo}</p>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {notiContent.attributes.when}</p>
                <p>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ : {notiContent.attributes.restaurant}</p>
                <p>‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà {notiContent.attributes.queueNo}</p>
              </div>
            )}
            {notiContent.type === "ORDER_CANCELED" && (
              <div className={styles.detail}>
                <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î :&nbsp;{notiContent.content}</p>
                <p>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {notiContent.attributes.tableNo}</p>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {notiContent.attributes.when}</p>
                <p>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ : {notiContent.attributes.restaurant}</p>
                <p>‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà {notiContent.attributes.queueNo}</p>
                <p className={styles.descibe}>* ‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                    ‡∏´‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô/‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô
                    ‡∏£‡∏∞‡∏ö‡∏ö</p>
              </div>
            )}
            {notiContent.type === "RESERVE_SUCCESS" && (
               <div className={styles.detail}>
                <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î :&nbsp;{notiContent.content}</p>
                <p>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {notiContent.attributes.tableNo}</p>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {notiContent.attributes.when}</p>
                <p>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ : {notiContent.attributes.restaurant}</p>
                <p>‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà {notiContent.attributes.queueNo}</p>
                <div className={styles.member}>
                  <p>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å :&nbsp;</p>
                  <div>
                    {notiContent.attributes.members.map((member, index) => (
                      <p key={index}>{member}</p>
                    ))}
                  </div>
                </div>
              </div>
            )}
            {notiContent.type === "RESERVE_FAILED" && (
              <div className={styles.detail}>
                <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î :&nbsp;{notiContent.content}</p>
                <p>‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {notiContent.attributes.tableNo}</p>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {notiContent.attributes.when}</p>
                <div className={styles.member}>
                  <p>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å :&nbsp;</p>
                  <div>
                    {notiContent.attributes.members.map((member, index) => (
                      <p key={index}>{member}</p>
                    ))}
                  </div>
                </div>
              </div>
            )}
        </div>
      </div>
    </div>
  );
}
